name: kafka_microservices_training


volumes:

  pg_sensors:
  pg_logs:


services:

  kafka-1:
    image: apache/kafka:3.8.0-rc3
    hostname: kafka-1
    container_name: kafka-1
    ports:
      - 29092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:19092,PLAINTEXT_HOST://localhost:29092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'ERROR'
      KAFKA_LOG4J_LOGGERS: 'kafka=WARN,kafka.controller=WARN,kafka.log.LogCleaner=WARN,state.change.logger=WARN,kafka.producer.async.DefaultEventHandler=WARN'

  kafka-2:
    image: apache/kafka:3.8.0-rc3
    hostname: kafka-2
    container_name: kafka-2
    ports:
      - 39092:9092
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-1:9093,2@kafka-2:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://:19092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:19092,PLAINTEXT_HOST://localhost:39092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      KAFKA_LOG4J_ROOT_LOGLEVEL: 'ERROR'
      KAFKA_LOG4J_LOGGERS: 'kafka=WARN,kafka.controller=WARN,kafka.log.LogCleaner=WARN,state.change.logger=WARN,kafka.producer.async.DefaultEventHandler=WARN'

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    ports:
      - "8080:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local_cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:19092,kafka-2:19092
      - LOGGING_LEVEL_ROOT=warn
      - LOGGING_LEVEL_COM_PROVECTUS=warn
    depends_on:
      - kafka-1
      - kafka-2
  
  db_sensors:
    image: postgres:16
    container_name: db_sensors
    restart: always
    environment:
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=postgres_password
      - POSTGRES_DB=sensors_db
    ports:
      - "5432:5432"
    volumes:
      - pg_sensors:/var/lib/postgresql/data/
  
  db_logs:
    image: postgres:16
    container_name: db_logs
    restart: always
    environment:
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=postgres_password
      - POSTGRES_DB=logs_db
    ports:
      - "5433:5432"
    volumes:
      - pg_logs:/var/lib/postgresql/data/
  
  sensor_service_01:
    container_name: sensor_service_01
    restart: always
    build:
      context: ./sensor_service_01/
    ports:
      - "8000:8000"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-ui

  sensor_service_02:
    container_name: sensor_service_02
    restart: always
    build:
      context: ./sensor_service_02/
    ports:
      - "9000:8000"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-ui

  sensor_service_03:
    container_name: sensor_service_03
    restart: always
    build:
      context: ./sensor_service_03/
    ports:
      - "10000:8000"
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-ui

  data_processing_service:
    container_name: data_processing_service
    restart: always
    build:
      context: ./data_processing_service/
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-ui
      - db_sensors
  
  logs_processing_service:
    container_name: logs_processing_service
    restart: always
    build:
      context: ./logs_processing_service/
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-ui
      - db_logs

  telegram_bot_service:
    container_name: telegram_bot_service
    restart: always
    env_file: ./.env
    build:
      context: ./telegram_bot_service/
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-ui
      - logs_processing_service
